API Reference
============

This API reference provides detailed documentation for all modules and functions in the JAX von Mises library.

Core Sampling Functions
----------------------

.. automodule:: jax_von_mises.sampler
   :members:
   :undoc-members:
   :show-inheritance:

Function Reference
~~~~~~~~~~~~~~~~~

.. py:function:: vmises_log_prob(x, loc, concentration)

   Compute the log probability density of the von Mises distribution.
   
   The log probability density function is defined as:
   
   .. math::
   
      \log f(x | \mu, \kappa) = -\log(2\pi I_0(\kappa)) + \kappa \cos(x - \mu)
   
   This function is numerically stable for a wide range of concentration values.
   
   :param x: Value to compute log probability for, in radians
   :type x: Array
   :param loc: Mean direction parameter (μ)
   :type loc: Array
   :param concentration: Concentration parameter (κ)
   :type concentration: Array
   :return: Log probability density values
   :rtype: Array
   
   **JAX Transformations**:
   
   - Compatible with jit, vmap, grad, and pmap
   - Autodiff-friendly implementation

.. py:function:: vmises_entropy(concentration)

   Compute the entropy of the von Mises distribution.
   
   The entropy formula for von Mises distribution is:
   
   .. math::
   
      H(\kappa) = -\kappa \frac{I_1(\kappa)}{I_0(\kappa)} + \log(2\pi I_0(\kappa))
   
   Using exponentially scaled Bessel functions for numerical stability:
   
   .. math::
   
      H(\kappa) = -\kappa \frac{i1e(\kappa)}{i0e(\kappa)} + \log(2\pi \cdot i0e(\kappa)) + \kappa
   
   This function is numerically stable for a wide range of concentration values and
   produces identical results to SciPy's :code:`vonmises.entropy()`.
   
   :param concentration: Concentration parameter (κ)
   :type concentration: Array
   :return: Entropy value of the von Mises distribution
   :rtype: Array
   
   **JAX Transformations**:
   
   - Compatible with jit, vmap, grad, and pmap
   - Autodiff-friendly implementation, enabling gradient-based optimization
   - Can be used as a drop-in replacement for SciPy's :code:`vonmises.entropy()`

.. py:function:: compute_p(kappa)

   Compute optimal p parameter for the wrapped Cauchy envelope.
   
   This is an internal function used by the von Mises sampling algorithm.
   The wrapped Cauchy distribution serves as an envelope for rejection sampling.
   
   The calculation uses:
   
   .. math::
   
      p = \frac{\kappa}{2} + \sqrt{1 + \left(\frac{\kappa}{2}\right)^2}
   
   :param kappa: Concentration parameter (κ)
   :type kappa: Array
   :return: Optimal p value for the wrapped Cauchy envelope
   :rtype: Array
   
   **Implementation Notes**:
   
   - For very small kappa values (< 1e-6), p approaches 0.5
   - Result is clipped to the range [0, 0.5] for numerical stability

.. py:function:: sample_von_mises(key, loc, concentration, shape=None, max_iters=100)

   Sample from von Mises distribution using Best-Fisher algorithm.
   
   This is the core sampling function that implements the Best-Fisher rejection sampling
   algorithm with a wrapped Cauchy envelope. The implementation is designed to be fully
   compatible with JAX transformations and to handle parameters generated by neural networks.
   
   :param key: PRNG key
   :type key: Array
   :param loc: Mean direction parameter (μ), in radians
   :type loc: Array
   :param concentration: Concentration parameter (κ) > 0
   :type concentration: Array
   :param shape: Output shape (optional, inferred from inputs if None)
   :type shape: Tuple[int, ...], optional
   :param max_iters: Maximum number of rejection sampling iterations
   :type max_iters: int
   :return: Samples from von Mises(loc, concentration), in radians in range [-π, π]
   :rtype: Array
   
   **Special Cases**:
   
   - For very small concentration values (< 1e-4), samples from uniform distribution
   - For very large concentration values (> 100), uses normal approximation for efficiency

Circular Statistics Utilities
----------------------------

.. automodule:: jax_von_mises.utils
   :members:
   :undoc-members:
   :show-inheritance:

Function Reference
~~~~~~~~~~~~~~~~~

.. py:function:: circular_mean(angles, axis=None)

   Compute the circular mean of an array of angles in radians.
   
   The circular mean is calculated as:
   
   .. math::
   
      \bar{\theta} = \text{atan2}\left(\frac{1}{n}\sum_{i=1}^{n}\sin(\theta_i), \frac{1}{n}\sum_{i=1}^{n}\cos(\theta_i)\right)
   
   :param angles: Array of angles in radians
   :type angles: Array
   :param axis: Axis along which to compute the mean
   :type axis: int, optional
   :return: Circular mean of the angles
   :rtype: Array

.. py:function:: circular_variance(angles, axis=None)

   Compute the circular variance of an array of angles in radians.
   
   The circular variance is a measure of dispersion for directional data, ranging from 0 (no dispersion)
   to 1 (uniform dispersion around the circle). It is calculated as:
   
   .. math::
   
      V = 1 - R
   
   where R is the mean resultant length:
   
   .. math::
   
      R = \sqrt{\left(\frac{1}{n}\sum_{i=1}^{n}\cos(\theta_i)\right)^2 + \left(\frac{1}{n}\sum_{i=1}^{n}\sin(\theta_i)\right)^2}
   
   :param angles: Array of angles in radians
   :type angles: Array
   :param axis: Axis along which to compute the variance
   :type axis: int, optional
   :return: Circular variance of the angles (0 to 1)
   :rtype: Array

.. py:function:: concentration_to_variance(kappa)

   Convert von Mises concentration parameter to circular variance.
   
   This function provides a mapping between the concentration parameter κ of a von Mises distribution
   and the corresponding circular variance. For large κ, the circular variance is approximately 1/κ.
   
   :param kappa: Concentration parameter (κ)
   :type kappa: Array
   :return: Corresponding circular variance (0 to 1)
   :rtype: Array

.. py:function:: variance_to_concentration(var)

   Convert circular variance to von Mises concentration parameter.
   
   This function is the inverse of concentration_to_variance, mapping from circular variance
   to the approximate concentration parameter κ of a von Mises distribution.
   
   :param var: Circular variance (0 to 1)
   :type var: Array
   :return: Approximate concentration parameter (κ)
   :rtype: Array

Neural Network Integration
-------------------------

.. automodule:: jax_von_mises.nn.integration
   :members:
   :undoc-members:
   :show-inheritance:

Function Reference
~~~~~~~~~~~~~~~~~

.. py:function:: von_mises_layer(key, mean_logits, concentration, temperature=1.0, training=True)

   Sample from a von Mises distribution for a directional layer in a neural network.
   
   This function is designed to be used as part of a neural network that produces
   directional outputs. During training, it samples from the von Mises distribution
   to enable exploration, while during inference it returns the mean direction.
   
   The temperature parameter controls the diversity of samples:
   - Higher temperature (> 1.0) produces more diverse samples
   - Lower temperature (< 1.0) produces samples closer to the mean
   
   :param key: PRNG key
   :type key: Array
   :param mean_logits: Unnormalized predicted angles (logits)
   :type mean_logits: Array
   :param concentration: Concentration parameter κ > 0
   :type concentration: Array
   :param temperature: Temperature for sampling (higher = more diversity)
   :type temperature: float
   :param training: Whether to sample (True) or return the mean (False)
   :type training: bool
   :return: Tuple of (samples, mean); samples are used during training, mean during inference
   :rtype: Tuple[Array, Array]

.. py:function:: pmap_compatible_von_mises_sampling(model_apply_fn, params, inputs, rng_key, temperature=1.0, training=True)

   Wrapper for using von Mises sampling within jax.pmap context.
   
   This function is designed to be used with neural networks that output
   parameters for von Mises distributions. It is particularly useful when
   training models with directional outputs on multiple devices using jax.pmap.
   
   :param model_apply_fn: Function to apply model parameters to inputs
   :type model_apply_fn: Callable[[Dict[str, Any], Array], Tuple[Array, Array]]
   :param params: Model parameters
   :type params: Dict[str, Any]
   :param inputs: Model inputs
   :type inputs: Array
   :param rng_key: PRNG key
   :type rng_key: Array
   :param temperature: Temperature for sampling
   :type temperature: float
   :param training: Whether to sample or return mean
   :type training: bool
   :return: Directional samples or means from the model output
   :rtype: Array 